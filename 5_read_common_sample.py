import sys
import os
import json
import pandas as pd 
import time
import datetime

#*--------------------------------------------------------------
#*  
#* This program will get all FP or FN .csv files under a certain folder
#* Then, combin all csv file to get final csv that stands  for a mis-labelled samples output of an ensembled model
#*
#*----------------------------------------------------------------

def get_all_FN_list(path):
    path = path.replace(" ","")
    if not path.endswith('/'):
        path= path +'/'
    
    files = [ f for f in os.listdir( path ) if  f.endswith('.csv') ]
    sum_list=[]

    for f in files:
        if 'FN' in f[:-4].split('_') :
            file_path = path+f
            sum_list.append(file_path)
    return sum_list

def get_all_FP_list(path):
    path = path.replace(" ","")
    if not path.endswith('/'):
        path= path +'/'

    files = [ f for f in os.listdir( path ) if  f.endswith('.csv') ]
    sum_list=[]
    for f in files:
        if 'FP' in f[:-4].split('_') :
            file_path = path+f
            sum_list.append(file_path)
    return sum_list
    

def get_file_info(file):
    path_split = file.split("/")
    file_name = path_split[-1][:-4]
    file_info = file_name.split('_')
    
    label = file_info[0]
    typ = file_info[1]

    return [label , typ ]


if __name__ == "__main__":
    time_stamp = datetime.datetime.now().strftime('%m_%d_%H_%M_%S')
    folder = sys.argv[1]
    summary = folder
    if not summary.endswith('/'):
        summary = summary + '/'


    FN_list = get_all_FN_list(folder)
    FP_list = get_all_FP_list(folder)
    print(FN_list)
    print(FP_list)

    num= 0
    test_dic ={}


    for FN in FN_list:
        if num ==0:
            
            try : 
                ser = pd.Series.from_csv(FN)
                print(len(ser))
                for ind in list(ser.index):
                    if ind not in test_dic:
                        test_dic[ind] = 1
                    else:
                        test_dic[ind] =  test_dic[ind] + 1
                num =num+1
            
            except pd.errors.EmptyDataError:
                print('%s is all zero inside '%(FN))

        else:
            try :
                ser_2 = pd.Series.from_csv(FN)
                print(len(ser_2))
                for ind in list(ser_2.index):
                    if ind not in test_dic:
                        test_dic[ind] = 1
                    else:
                        test_dic[ind] =  test_dic[ind] + 1
                ser = ser.add(ser_2, fill_value=0)

            except pd.errors.EmptyDataError:
                print('%s is all zero inside '%(FN))
            

    ser = ser.sort_values(ascending = False)

    FN_ser = ser
    print(FN_ser)

    saving_FN = summary+'FN_.csv'
    FN_ser.to_csv(saving_FN,header = False)

    num=0
    for FP in FP_list:
        if num ==0:
            try:
                ser = pd.Series.from_csv(FP)
                print(len(ser))
                for ind in list(ser.index):
                    if ind not in test_dic:
                        test_dic[ind] = 1
                    else:
                        test_dic[ind] =  test_dic[ind] + 1
                num = num +1
            except pd.errors.EmptyDataError:
                print('%s is all zero inside '%(FP))

        else:
            
            try :
                ser_2 = pd.Series.from_csv(FP)
                print(len(ser_2))
                for ind in list(ser_2.index):
                    if ind not in test_dic:
                        test_dic[ind] = 1
                    else:
                        test_dic[ind] =  test_dic[ind] + 1
                ser = ser.add(ser_2, fill_value=0)
            except pd.errors.EmptyDataError:
                print('%s is all zero inside '%(FP))

    ser = ser.sort_values(ascending = False)
    FP_ser = ser
    print(FP_ser)
    print(len(FP_ser) )
    
    saving_FP = summary+'FP_.csv'
    FP_ser.to_csv(saving_FP,header = False)
    
    saving_F = summary+'F_.csv'
    FN_ser = FN_ser.add(FP_ser, fill_value=0)
    FN_ser = FN_ser.sort_values(ascending = False)
    
    FN_ser.to_csv(saving_F,header = False)
    
    print(FN_ser)


    print(test_dic)
    print(len(test_dic))


